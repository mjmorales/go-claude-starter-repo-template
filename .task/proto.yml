# .task/proto.yml - Protocol Buffer task definitions
version: '3'

vars:
  PROTO_DIR: "{{.MONOREPO_ROOT}}/api/proto"
  PROTO_OUT: "{{.MONOREPO_ROOT}}/pkg/pb"

tasks:
  generate:
    desc: Generate all protobuf code
    deps: [install:deps]
    cmds:
      - |
        if [ ! -d "{{.PROTO_DIR}}" ]; then
          echo "‚ö†Ô∏è  No proto directory found at {{.PROTO_DIR}}"
          mkdir -p {{.PROTO_DIR}}
          echo "üìÅ Created {{.PROTO_DIR}}"
          exit 0
        fi
        
        PROTO_FILES=$(find {{.PROTO_DIR}} -name "*.proto" 2>/dev/null)
        if [ -z "$PROTO_FILES" ]; then
          echo "‚ö†Ô∏è  No .proto files found"
          exit 0
        fi
        
        echo "üîÑ Generating protobuf code..."
        mkdir -p {{.PROTO_OUT}}
        
        for proto in $PROTO_FILES; do
          echo "  Processing $(basename $proto)..."
          protoc \
            --proto_path={{.PROTO_DIR}} \
            --go_out={{.PROTO_OUT}} \
            --go_opt=paths=source_relative \
            --go-grpc_out={{.PROTO_OUT}} \
            --go-grpc_opt=paths=source_relative \
            "$proto"
        done
        echo "‚úÖ Protobuf code generated in {{.PROTO_OUT}}"

  generate:service:
    desc: Generate protobuf for a specific service
    vars:
      SERVICE_PROTO: "{{.PROTO_DIR}}/{{.SERVICE}}"
    cmds:
      - |
        if [ ! -d "{{.SERVICE_PROTO}}" ]; then
          echo "‚ùå No proto directory for service {{.SERVICE}}"
          exit 1
        fi
        
        echo "üîÑ Generating protobuf for {{.SERVICE}}..."
        mkdir -p {{.PROTO_OUT}}/{{.SERVICE}}
        
        protoc \
          --proto_path={{.PROTO_DIR}} \
          --go_out={{.PROTO_OUT}} \
          --go_opt=paths=source_relative \
          --go-grpc_out={{.PROTO_OUT}} \
          --go-grpc_opt=paths=source_relative \
          {{.SERVICE_PROTO}}/*.proto
        
        echo "‚úÖ Generated protobuf for {{.SERVICE}}"
    requires:
      vars: [SERVICE]

  buf:generate:
    desc: Generate protobuf using Buf
    deps: [buf:lint]
    cmds:
      - |
        if ! command -v buf >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  Buf not installed. Installing..."
          task tools:install:buf
        fi
        
        if [ ! -f "{{.PROTO_DIR}}/buf.yaml" ]; then
          echo "‚ö†Ô∏è  No buf.yaml found. Creating default..."
          task proto:buf:init
        fi
        
        echo "üîÑ Generating with Buf..."
        cd {{.PROTO_DIR}} && buf generate
        echo "‚úÖ Buf generation complete"

  buf:init:
    desc: Initialize Buf configuration
    cmds:
      - |
        mkdir -p {{.PROTO_DIR}}
        if [ ! -f "{{.PROTO_DIR}}/buf.yaml" ]; then
          cat > {{.PROTO_DIR}}/buf.yaml <<EOF
        version: v2
        modules:
          - path: .
        lint:
          use:
            - DEFAULT
        breaking:
          use:
            - FILE
        EOF
          echo "‚úÖ Created buf.yaml"
        fi
        
        if [ ! -f "{{.PROTO_DIR}}/buf.gen.yaml" ]; then
          cat > {{.PROTO_DIR}}/buf.gen.yaml <<EOF
        version: v2
        managed:
          enabled: true
          override:
            - file_option: go_package_prefix
              value: github.com/yourorg/monorepo/pkg/pb
        plugins:
          - remote: buf.build/protocolbuffers/go
            out: ../../pkg/pb
            opt:
              - paths=source_relative
          - remote: buf.build/grpc/go
            out: ../../pkg/pb
            opt:
              - paths=source_relative
        EOF
          echo "‚úÖ Created buf.gen.yaml"
        fi

  buf:lint:
    desc: Lint protobuf files with Buf
    cmds:
      - |
        if [ -f "{{.PROTO_DIR}}/buf.yaml" ]; then
          echo "üîç Linting protobuf files..."
          cd {{.PROTO_DIR}} && buf lint
          echo "‚úÖ Protobuf lint passed"
        else
          echo "‚ö†Ô∏è  No buf.yaml found. Run 'task proto:buf:init' first"
        fi

  buf:breaking:
    desc: Check for breaking changes
    cmds:
      - |
        if [ -f "{{.PROTO_DIR}}/buf.yaml" ]; then
          echo "üîç Checking for breaking changes..."
          cd {{.PROTO_DIR}} && buf breaking --against '.git#branch=main'
          echo "‚úÖ No breaking changes detected"
        else
          echo "‚ö†Ô∏è  No buf.yaml found"
        fi

  install:deps:
    desc: Install protobuf dependencies
    cmds:
      - |
        if ! command -v protoc >/dev/null 2>&1; then
          task tools:install:protoc
        fi
        
        echo "üì¶ Installing protoc plugins..."
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
        echo "‚úÖ Protobuf dependencies installed"

  clean:
    desc: Clean generated protobuf code
    cmds:
      - |
        echo "üßπ Cleaning generated protobuf code..."
        rm -rf {{.PROTO_OUT}}
        echo "‚úÖ Protobuf code cleaned"

  validate:
    desc: Validate protobuf definitions
    cmds:
      - |
        echo "üîç Validating protobuf files..."
        PROTO_FILES=$(find {{.PROTO_DIR}} -name "*.proto" 2>/dev/null)
        if [ -z "$PROTO_FILES" ]; then
          echo "‚ö†Ô∏è  No .proto files found"
          exit 0
        fi
        
        for proto in $PROTO_FILES; do
          echo "  Validating $(basename $proto)..."
          protoc --proto_path={{.PROTO_DIR}} "$proto" --descriptor_set_out=/dev/null
        done
        echo "‚úÖ All protobuf files are valid"